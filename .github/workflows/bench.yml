name: Bench

on:
  workflow_dispatch:

jobs:
  bench:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        benchmark:
          - "generic_arity_2"
          - "generic_arity_3"
          - "generic_arity_4"
          - "generic_arity_5"
          - "generic_arity_6"
          - "generic_arity_7"
          - "generic_arity_8"
          - "generic_arity_9"
          - "generic_arity_10"
          - "generic_arity_11"
          - "generic_arity_12"
          - "generic_arity_13"
          - "generic_arity_14"
          - "generic_arity_15"
          - "generic_arity_16"
          - "generic_arity_32"
          - "generic_arity_256"
          - "generic_arity_65536"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "19"
      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Setup Minecraft
        uses: mcenv/setup-minecraft@v3
        with:
          version: "snapshot"
      - name: Benchmark
        run: |
          cd server
          curl -L -o mch.jar https://github.com/mcenv/mch/releases/latest/download/mch.jar
          java -jar mch.jar --mc=$MINECRAFT "--jvm-args=-Xms2G -Xmx2G" --execute-benchmarks=${{ matrix.benchmark }}:baseline,${{ matrix.benchmark }}:access
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.benchmark }}
          path: server/mch-results.json
          retention-days: 1
  merge:
    needs: bench
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: versions
      - uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs");
            const results = {};
            const globber = await glob.create("versions/*/mch-results.json");
            const versions = await globber.glob();
            for (const version of versions) {
              const id = version.slice(0, -"/mch-results.json".length).split("/").pop();
              results[id] = JSON.parse(fs.readFileSync(version));
            }
            fs.writeFileSync("results.json", JSON.stringify(results));
            return;
      - uses: actions/upload-artifact@v3
        with:
          name: results
          path: results.json
